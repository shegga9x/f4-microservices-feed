package com.f4.feed.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FeedItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedItemAllPropertiesEquals(FeedItem expected, FeedItem actual) {
        assertFeedItemAutoGeneratedPropertiesEquals(expected, actual);
        assertFeedItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedItemAllUpdatablePropertiesEquals(FeedItem expected, FeedItem actual) {
        assertFeedItemUpdatableFieldsEquals(expected, actual);
        assertFeedItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedItemAutoGeneratedPropertiesEquals(FeedItem expected, FeedItem actual) {
        assertThat(actual)
            .as("Verify FeedItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedItemUpdatableFieldsEquals(FeedItem expected, FeedItem actual) {
        assertThat(actual)
            .as("Verify FeedItem relevant properties")
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getContent()).as("check content").isEqualTo(expected.getContent()))
            .satisfies(a -> assertThat(a.getImageUrl()).as("check imageUrl").isEqualTo(expected.getImageUrl()))
            .satisfies(a -> assertThat(a.getVideoUrl()).as("check videoUrl").isEqualTo(expected.getVideoUrl()))
            .satisfies(a -> assertThat(a.getVisibility()).as("check visibility").isEqualTo(expected.getVisibility()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getLikesCount()).as("check likesCount").isEqualTo(expected.getLikesCount()))
            .satisfies(a -> assertThat(a.getCommentsCount()).as("check commentsCount").isEqualTo(expected.getCommentsCount()))
            .satisfies(a -> assertThat(a.getSharesCount()).as("check sharesCount").isEqualTo(expected.getSharesCount()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFeedItemUpdatableRelationshipsEquals(FeedItem expected, FeedItem actual) {
        // empty method
    }
}
